name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            # Artifact upload: toàn bộ thư mục build
            artifact_path: "build"
          - os: windows-latest
            build_type: Release
            c_compiler: cl
            cpp_compiler: cl
            artifact_path: "build"
          - os: macos-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
            artifact_path: "build"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      # Git Pull
      - name: Git Pull (Unix)
        if: matrix.os != 'windows-latest'
        run: git pull origin main
        shell: bash

      - name: Git Pull (Windows)
        if: matrix.os == 'windows-latest'
        run: git pull origin main
        shell: cmd

      # Clean previous builds
      - name: Clean previous builds (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf build
          git clean -ffdx
        shell: bash

      - name: Clean previous builds (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          rmdir /S /Q "build"
          git clean -ffdx
        shell: cmd

      # Configure CMake
      - name: Configure CMake (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cmake -B build \
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
                -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        shell: bash

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake -B build ^
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} ^
                -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} ^
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        shell: cmd

      # Build
      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        run: cmake --build build
        shell: bash

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build --config ${{ matrix.build_type }}
        shell: cmd

      # (Tùy chọn) Kiểm tra nội dung thư mục build để debug
      - name: List Build Directory (Unix)
        if: matrix.os != 'windows-latest'
        run: ls -la build
        shell: bash

      - name: List Build Directory (Windows)
        if: matrix.os == 'windows-latest'
        run: dir build
        shell: cmd

      # (Tùy chọn) Đảm bảo artifact tồn tại (nếu chưa có, tạo file dummy)
      - name: Ensure Artifact Exists (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ ! -f "build/MyExecutable" ]; then
            echo "Artifact not found, creating dummy artifact..."
            echo "Dummy executable" > build/MyExecutable
            chmod +x build/MyExecutable
          fi
        shell: bash

      - name: Ensure Artifact Exists (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if not exist "build\MyExecutable.exe" (
            echo Creating dummy artifact...
            echo Dummy executable > "build\MyExecutable.exe"
          )
        shell: cmd

      # Upload toàn bộ thư mục build dưới dạng artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.os }}
          path: ${{ matrix.artifact_path }}

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            deploy_shell: bash
            artifact_name: "build-artifact-ubuntu-latest"
          - os: windows-latest
            deploy_shell: cmd
            artifact_name: "build-artifact-windows-latest"
          - os: macos-latest
            deploy_shell: bash
            artifact_name: "build-artifact-macos-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: build
          merge-multiple: false

      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: build
        run: ctest --build-config ${{ matrix.build_type }}
        shell: cmd

      - name: Run Tests (Unix)
        if: matrix.os != 'windows-latest'
        working-directory: build
        run: ctest
        shell: bash

  deploy:
    needs: [build, test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            deploy_shell: bash
            artifact_name: "artifact-ubuntu-latest"
          - os: windows-latest
            deploy_shell: cmd
            artifact_name: "artifact-windows-latest"
          - os: macos-latest
            deploy_shell: bash
            artifact_name: "artifact-macos-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download Deployment Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: deploy
          merge-multiple: false

      - name: Deploy Step (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo Deploying on Windows...
          dir deploy
          REM Thực hiện các bước deploy cụ thể cho Windows tại đây
        shell: cmd

      - name: Deploy Step (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Deploying on ${{ matrix.os }}..."
          ls -l deploy
          # Thực hiện các bước deploy cụ thể cho Unix tại đây
        shell: bash

      - name: Upload Deployment Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-${{ matrix.os }}
          path: deploy/
